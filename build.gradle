plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.41'
    id 'org.springframework.boot' version '2.1.9.RELEASE'
    id 'io.spring.dependency-management' version "1.0.8.RELEASE"
    id 'maven-publish'
    id 'org.jetbrains.dokka' version '0.10.0'
    id "org.asciidoctor.convert" version "1.5.9.2"
}

apply plugin: 'maven'
apply plugin: 'com.differ.differcommit.plugins.DifferCommitPlugin'
apply plugin: 'org.asciidoctor.convert'

project.group 'com.differ'
project.version '1.0.0'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

sourceSets {
    testIntegration {
        java.srcDir 'src/testIntegration/java'
        kotlin.srcDir 'src/testIntegration/kotlin'
        resources.srcDir 'src/testIntegration/resources'
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
}

configurations {
    testIntegrationCompile.extendsFrom testImplementation
    testIntegrationRuntime.extendsFrom testRuntimeOnly
}

task testIntegration(type: Test) {
    testClassesDirs = sourceSets.testIntegration.output.classesDirs
    classpath = sourceSets.testIntegration.runtimeClasspath
}
check.dependsOn testIntegration
testIntegration.mustRunAfter test

build.dependsOn differcommit

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/dokka"
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
}

bootJar {
    enabled = false
}

jar {
    enabled = true
}

test {
    useJUnitPlatform()
}

ext['snippetsDir'] = file('build/generated-snippets')

testIntegration {
    useJUnitPlatform()
    outputs.dir snippetsDir
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"

    implementation 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-freemarker'
    implementation 'org.springframework.boot:spring-boot-starter-logging'

    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.4.RELEASE'
    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc:2.0.4.RELEASE'

    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation("org.junit.jupiter:junit-jupiter")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    testImplementation group: 'org.hamcrest', name: 'hamcrest-core', version: '2.2'
    testImplementation group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.2'
    testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.2'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestIntegrationKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

asciidoctor {
    backends = ['html5']
    options doctype: 'book'

        attributes = [
            'source-highlighter': 'highlightjs',
            'imagesdir'         : './images',
            'toc'               : 'left',
            'toclevels'         : 3,
            'numbered'          : '',
            'icons'             : 'font',
            'setanchors'        : '',
            'idprefix'          : '',
            'idseparator'       : '-',
            'docinfo1'          : '',
            'safe-mode-unsafe'  : '',
            'allow-uri-read'    : '',
            'snippets'          : snippetsDir,
            linkattrs           : true,
            encoding            : 'utf-8'
    ]

    inputs.dir snippetsDir
    dependsOn testIntegration
    outputs.dir file("build/asciidoc")
    sourceDir file('src/docs/asciidoc')
    sources {
        include 'index.adoc'
    }
}